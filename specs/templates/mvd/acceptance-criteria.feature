# language: ja
@user-story @acceptance-test
機能: [機能名] - ユーザーストーリー [US-ID] の受入基準
  [ユーザータイプ]として
  [価値・理由]のために
  [機能・目標]が期待通りに動くことを確認したい

  背景:
    前提 システムが正常に起動している
    かつ テスト用のクリーンな環境が用意されている

  @happy-path @smoke-test
  シナリオ: 正常系 - 基本的な操作フロー
    前提 ユーザーが有効な入力データを準備している
    もし [アクション]を実行する
    ならば [期待される結果]が表示される
    かつ システムの状態が正しく更新される

  @error-handling
  シナリオ: 異常系 - バリデーションエラー
    前提 ユーザーが無効なデータを入力している
    もし [アクション]を実行する
    ならば エラーメッセージが表示される
    かつ システムの状態は変更されない

  @boundary-test
  シナリオアウトライン: 境界値テスト
    前提 "<入力タイプ>"の境界値データを用意する
    もし データを送信する
    ならば ステータスコード "<ステータス>" を受け取る
    かつ レスポンスに "<メッセージ>" が含まれる

    例:
      | 入力タイプ    | ステータス | メッセージ          |
      | 最小値        | 200        | success            |
      | 最大値        | 200        | success            |
      | 最小値-1      | 400        | validation_error   |
      | 最大値+1      | 400        | validation_error   |
      | 空文字        | 400        | required_field     |

  @performance
  シナリオ: パフォーマンステスト
    前提 1000件のテストデータが存在する
    もし [処理]を実行する
    ならば 2秒以内にレスポンスが返される
    かつ 結果が正しく表示される

  @security
  シナリオ: セキュリティテスト
    前提 認証されていないユーザーがアクセスしようとする
    もし [保護されたリソース]にアクセスする
    ならば ステータスコード "401" を受け取る
    かつ 認証エラーメッセージが表示される

# 記入ガイドライン：
#
# 1. タグ付けのベストプラクティス
#    @user-story: ユーザーストーリーとの紐付け
#    @happy-path: 正常系シナリオ
#    @error-handling: 異常系・エラーハンドリング
#    @boundary-test: 境界値テスト
#    @performance: パフォーマンステスト
#    @security: セキュリティテスト
#    @smoke-test: スモークテスト（重要な基本機能）
#
# 2. シナリオ記述のポイント
#    - 前提: テストの前提条件を明確に
#    - もし: ユーザーの行動・システムへの入力
#    - ならば: 期待される結果・システムの応答
#    - かつ: 追加の確認事項
#
# 3. データ駆動テスト
#    - シナリオアウトラインで複数パターンをテスト
#    - 例テーブルで具体的なデータを定義
#
# 4. 実行可能性
#    - 自動テストで実行できるレベルまで具体化
#    - 測定可能な期待値を設定
#    - 環境依存を避ける記述