services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    working_dir: /app/backend
    environment:
      # ホストとの権限同期用環境変数
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${USER_NAME:-developer}
    volumes:
      - .:/app
      # Use anonymous volumes to avoid sharing host's .venv
      # Renew volumes when you change packages with
      # `docker compose up --renew-anon-volumes`
      - /app/.venv
    ports:
      - "8000:8000"
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    command: >-
      bash -lc "set -o pipefail; mkdir -p /app/.logs && uv run --no-sync uvicorn main:app --host 0.0.0.0 --port 8000 2>&1 | tee -a /app/.logs/backend.log"

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    working_dir: /app
    restart: unless-stopped
    environment:
      # When running both services in containers, proxy to backend service name
      VITE_BACKEND_ORIGIN: http://app:8000
      NODE_ENV: development
      CI: "true"
      # ホストとの権限同期用環境変数（参考用）
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
    volumes:
      - .:/app
      # Use anonymous volume for node_modules inside container
      - /app/node_modules
      - /app/frontend/node_modules
    ports:
      - "3000:3000"
    command: >-
      bash -lc "set -o pipefail; mkdir -p /app/.logs && pnpm install --recursive --force && pnpm --dir frontend dev -- --host 0.0.0.0 2>&1 | tee -a /app/.logs/frontend.log"
    depends_on:
      - app

  streamlit:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    working_dir: /app/backend
    environment:
      # Point to backend service for API calls
      API_BASE_URL: http://app:8000
      # ホストとの権限同期用環境変数
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${USER_NAME:-developer}
    volumes:
      - .:/app
      # Use anonymous volumes to avoid sharing host's .venv
      - /app/.venv
    ports:
      - "8501:8501"
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    command: >-
      bash -lc "set -o pipefail; mkdir -p /app/.logs && uv run --no-sync --group streamlit streamlit run ../streamlit/app.py --server.port 8501 --server.address 0.0.0.0 2>&1 | tee -a /app/.logs/streamlit.log"
    depends_on:
      - app

  workspace:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    restart: unless-stopped
    working_dir: /workspace
    environment:
      SECURE_MODE: ${SECURE_MODE:-true}
      ADDITIONAL_ALLOWED_DOMAINS: ${ADDITIONAL_ALLOWED_DOMAINS:-}
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${GROUP_NAME:-developer}
      NODE_ENV: development
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      DEV_ENTRY_MODE: workspace
    cap_add:
      - NET_ADMIN
    volumes:
      - .:/workspace
      - claude-config:/home/developer/.claude
      - dev-cache:/workspace/.cache
      - /workspace/.venv
      - /workspace/frontend/node_modules
    expose:
      - "3000"
      - "7681"
      - "7682"
      - "7683"

  proxy:
    image: caddy:2.8-alpine
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./dashboard:/srv/dashboard:ro
    depends_on:
      - frontend
      - app
      - streamlit
      - workspace

  # セキュア開発環境（Claude Code + ファイアウォール）
  dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    restart: "no"  # 開発用なので自動再起動しない
    working_dir: /workspace
    environment:
      # セキュリティ設定
      SECURE_MODE: ${SECURE_MODE:-true}
      ADDITIONAL_ALLOWED_DOMAINS: ${ADDITIONAL_ALLOWED_DOMAINS:-}
      
      
      # 開発環境設定
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      NODE_ENV: development
      
      # ユーザー設定（ホストとの同期）
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${GROUP_NAME:-developer}
    
    # セキュリティ設定のためのcapabilities
    cap_add:
      - NET_ADMIN  # iptables操作に必要
    
    volumes:
      - .:/workspace
      # Claude Code設定の永続化
      - claude-config:/home/developer/.claude
      # キャッシュディレクトリの永続化
      - dev-cache:/workspace/.cache
      # 仮想環境の分離
      - /workspace/.venv
      - /workspace/frontend/node_modules
    
    ports:
      - "3000:3000"  # React開発サーバー
      - "8000:8000"  # FastAPI
      - "8501:8501"  # Streamlit
    
    # インタラクティブモードを有効化
    stdin_open: true
    tty: true
    
    # プロファイル設定（通常は起動しない）
    profiles:
      - dev

# 名前付きボリューム
volumes:
  claude-config:
    driver: local
  dev-cache:
    driver: local
