services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    working_dir: /app/apps/backend
    environment:
      # ホストとの権限同期用環境変数
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${USER_NAME:-developer}
    volumes:
      - .:/app
      # Use anonymous volumes to avoid sharing host's .venv
      # Renew volumes when you change packages with
      # `docker compose up --renew-anon-volumes`
      - /app/.venv
    ports:
      - "8000:8000"
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    command: >-
      bash -lc "set -o pipefail; mkdir -p /app/.logs && uv run --no-sync uvicorn main:app --host 0.0.0.0 --port 8000 2>&1 | tee -a /app/.logs/backend.log"

  frontend:
    image: node:20-bullseye
    restart: unless-stopped
    working_dir: /workspace
    environment:
      NODE_ENV: development
      CI: "true"
      VITE_BACKEND_ORIGIN: http://app:8000
      VITE_API_URL: http://app:8000
    volumes:
      - .:/workspace
      - /workspace/apps/frontend/node_modules
      - /workspace/.pnpm-store
    expose:
      - "3001"
    command: >
      bash -lc "
        set -o pipefail;
        if ! command -v pnpm >/dev/null 2>&1; then
          npm install -g pnpm@9.12.0;
        fi;
        if [ ! -d /workspace/apps/frontend/node_modules ]; then
          pnpm install --recursive --frozen-lockfile;
        fi;
        pnpm --dir apps/frontend dev -- --host 0.0.0.0 --port 3001 2>&1 | tee -a /tmp/frontend.log
      "
    depends_on:
      - app

  workspace:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    restart: unless-stopped
    working_dir: /workspace
    environment:
      SECURE_MODE: ${SECURE_MODE:-true}
      ADDITIONAL_ALLOWED_DOMAINS: ${ADDITIONAL_ALLOWED_DOMAINS:-}
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: developer
      GROUP_NAME: developer
      NODE_ENV: development
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      DEV_ENTRY_MODE: workspace
    cap_add:
      - NET_ADMIN
    volumes:
      - .:/workspace
      - claude-config:/home/developer/.claude
      - dev-cache:/workspace/.cache
      - /workspace/.venv
      - /workspace/apps/frontend/node_modules
      # Google Cloud認証情報のマウント（トークン更新のため書き込み可能）
      # Linux/Mac/WSL2の場合: GCLOUD_CONFIG_PATH=${HOME}/.config/gcloud
      # Windows PowerShellの場合: GCLOUD_CONFIG_PATH=${APPDATA}/gcloud
      - type: bind
        source: ${GCLOUD_CONFIG_PATH:-${HOME}/.config/gcloud}
        target: /home/developer/.config/gcloud
        read_only: false
    ports:
      - "3000:3000"
    expose:
      - "7681"
      - "7682"
      - "7683"
      - "8300"

  proxy:
    image: caddy:2.8-alpine
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./dashboard:/srv/dashboard:ro
    depends_on:
      - frontend
      - app
      - workspace

  # セキュア開発環境（Claude Code + ファイアウォール）
  dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    restart: "no"  # 開発用なので自動再起動しない
    working_dir: /workspace
    environment:
      # セキュリティ設定
      SECURE_MODE: ${SECURE_MODE:-true}
      ADDITIONAL_ALLOWED_DOMAINS: ${ADDITIONAL_ALLOWED_DOMAINS:-}
      
      
      # 開発環境設定
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      NODE_ENV: development
      
      # ユーザー設定（ホストとの同期）
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USER_NAME: ${USER_NAME:-developer}
      GROUP_NAME: ${GROUP_NAME:-developer}
    
    # セキュリティ設定のためのcapabilities
    cap_add:
      - NET_ADMIN  # iptables操作に必要
    
    volumes:
      - .:/workspace
      # Claude Code設定の永続化
      - claude-config:/home/developer/.claude
      # キャッシュディレクトリの永続化
      - dev-cache:/workspace/.cache
      # 仮想環境の分離
      - /workspace/.venv
      - /workspace/apps/frontend/node_modules
      # Google Cloud認証情報のマウント（トークン更新のため書き込み可能）
      # Linux/Mac/WSL2の場合: GCLOUD_CONFIG_PATH=${HOME}/.config/gcloud
      # Windows PowerShellの場合: GCLOUD_CONFIG_PATH=${APPDATA}/gcloud
      - type: bind
        source: ${GCLOUD_CONFIG_PATH:-${HOME}/.config/gcloud}
        target: /home/developer/.config/gcloud
        read_only: false
    
    ports:
      - "3000:3000"  # React開発サーバー
      - "8000:8000"  # FastAPI
    
    # インタラクティブモードを有効化
    stdin_open: true
    tty: true
    
    # プロファイル設定（通常は起動しない）
    profiles:
      - dev

# 名前付きボリューム
volumes:
  claude-config:
    driver: local
  dev-cache:
    driver: local
